#!/bin/sh

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

BIOME_WARNINGS=0
TEST_WARNINGS=0

# Get branch name
BRANCH_NAME=$(git symbolic-ref --short HEAD)
PROTECTED_BRANCHES="^(main|master|develop|staging|prod)$"
IS_PROTECTED=0

if echo "$BRANCH_NAME" | grep -Eq "$PROTECTED_BRANCHES"; then
    IS_PROTECTED=1
fi

# Utility functions
print_header() {
    echo "\n${BOLD}${BLUE}════════════════════════════════════════════${NC}"
    echo "${BOLD}${BLUE}   🚀 PRE-PUSH CHECKS STARTED (Branch: ${BRANCH_NAME})${NC}"
    echo "${BOLD}${BLUE}════════════════════════════════════════════${NC}\n"
}

print_section() {
    echo "${CYAN}▶ $1...${NC}"
}

print_success() {
    echo "${GREEN}✓ $1${NC}"
}

print_error() {
    echo "\n${RED}────────────────────────────────────────${NC}"
    echo "${RED}${BOLD}✕ $1${NC}"
    echo "${RED}────────────────────────────────────────${NC}"
    echo "$2\n"
    print_footer 1
    exit 1
}

print_footer() {
    echo "\n${BOLD}════════════════════════════════════════════${NC}"
    if [ $1 -eq 0 ]; then
        echo "${BOLD}${GREEN}✅ ALL PRE-PUSH CHECKS PASSED${NC}"
    else
        echo "${BOLD}${RED}❌ PRE-PUSH CHECKS FAILED${NC}"
    fi
    echo "${BOLD}════════════════════════════════════════════${NC}\n"
}

# Run command and capture output
run_command() {
    echo "${CYAN}Running $2...${NC}"
    
    # Execute the command directly to ensure proper output display
    $1
    local exit_code=$?
    
    # Capture output for analysis
    local output
    output=$($1 2>&1)

    if [ $exit_code -eq 0 ]; then
        print_success "$2"
    else
        print_error "$3" "$output"
    fi
}

# Lint check -> now a full check
run_check() {
    echo "${CYAN}Running comprehensive check with Biome...${NC}"
    
    local exit_code
    if [ $IS_PROTECTED -eq 1 ]; then
        echo "${YELLOW}Protected branch detected. Enforcing stricter checks (--error-on-warnings).${NC}"
        pnpm biome check . --error-on-warnings
        exit_code=$?
    else
        pnpm check
        exit_code=$?
    fi
    
    if [ $exit_code -ne 0 ]; then
        echo "\n${RED}────────────────────────────────────────${NC}"
        echo "${RED}${BOLD}[BIOME] Check failed. Please fix the errors above before pushing.${NC}"
        echo "${RED}────────────────────────────────────────${NC}"
        # Biome already printed the errors, so we just exit.
        print_footer 1
        exit 1
    else
        print_success "[BIOME] No issues found"
    fi
}

# Test check
run_tests() {
    echo "${CYAN}Running tests...${NC}"
    
    # Run tests directly to ensure proper output
    pnpm test
    local exit_code=$?
    
    # Capture the test output for analysis
    local output
    output=$(pnpm test 2>&1)
    
    if [ $exit_code -ne 0 ] || echo "$output" | grep -q "FAIL"; then
        echo "\n${RED}────────────────────────────────────────${NC}"
        echo "${RED}${BOLD}[TEST] Some tests failed:${NC}"
        echo "${RED}────────────────────────────────────────${NC}"
        echo "$output\n"
        print_footer 1
        exit 1
    elif echo "$output" | grep -qi "warn"; then
        TEST_WARNINGS=1
        if [ $IS_PROTECTED -eq 1 ]; then
            echo "\n${RED}────────────────────────────────────────${NC}"
            echo "${RED}${BOLD}[TEST] Warnings are not allowed on protected branches${NC}"
            echo "${RED}────────────────────────────────────────${NC}"
            echo "$output\n"
            print_footer 1
            exit 1
        else
            echo "\n${YELLOW}────────────────────────────────────────${NC}"
            echo "${YELLOW}${BOLD}⚠ [TEST] Warnings detected:${NC}"
            echo "${YELLOW}────────────────────────────────────────${NC}"
            echo "$output"
        fi
    else
        print_success "[TEST] All tests passed"
    fi
}

# Check for uncommitted changes
check_uncommitted() {
    if [ -n "$(git status --porcelain)" ]; then
        echo "\n${RED}────────────────────────────────────────${NC}"
        echo "${RED}${BOLD}[GIT] Uncommitted changes detected${NC}"
        echo "${RED}────────────────────────────────────────${NC}"
        echo "${RED}Commit your changes before pushing.${NC}\n"
        print_footer 1
        exit 1
    fi
}

# Start script
print_header

check_uncommitted

print_section "Checking code quality"
run_check

print_section "Checking types"
echo "${CYAN}Running type check...${NC}"
pnpm type-check
type_check_exit_code=$?

if [ $type_check_exit_code -eq 0 ]; then
    print_success "[TYPES] No type errors detected"
else
    type_check_output=$(pnpm type-check 2>&1)
    echo "\n${RED}────────────────────────────────────────${NC}"
    echo "${RED}${BOLD}[TYPES] Type check failed with the following errors:${NC}"
    echo "${RED}────────────────────────────────────────${NC}"
    echo "$type_check_output"
    
    echo "\n${RED}Files with type errors:${NC}"
    echo "$type_check_output" | grep -E "^[^ ]+\.[t|j]sx?:[0-9]+:[0-9]+" | sort | uniq
    print_footer 1
    exit 1
fi

print_section "Running tests"
run_tests

print_section "Building project"
echo "${CYAN}Running build...${NC}"
pnpm build
build_exit_code=$?

if [ $build_exit_code -eq 0 ]; then
    print_success "[BUILD] Build completed successfully"
else
    build_output=$(pnpm build 2>&1)
    echo "\n${RED}────────────────────────────────────────${NC}"
    echo "${RED}${BOLD}[BUILD] Build failed with the following errors:${NC}"
    echo "${RED}────────────────────────────────────────${NC}"
    echo "$build_output"
    print_footer 1
    exit 1
fi

print_footer 0
