#!/bin/sh

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Utility functions
print_header() {
    echo "\n${BOLD}${BLUE}════════════════════════════════════════════${NC}"
    echo "${BOLD}${BLUE}   🔍 PRE-COMMIT CHECKS STARTED${NC}"
    echo "${BOLD}${BLUE}════════════════════════════════════════════${NC}\n"
}

print_section() {
    echo "${CYAN}▶ $1...${NC}"
}

print_success() {
    echo "${GREEN}✓ $1${NC}"
}

print_error() {
    echo "\n${RED}────────────────────────────────────────${NC}"
    echo "${RED}${BOLD}✕ $1${NC}"
    echo "${RED}────────────────────────────────────────${NC}"
    echo "$2\n"
    exit 1
}

print_footer() {
    echo "\n${BOLD}════════════════════════════════════════════${NC}"
    if [ $1 -eq 0 ]; then
        echo "${BOLD}${GREEN}✅ ALL PRE-COMMIT CHECKS PASSED${NC}"
    else
        echo "${BOLD}${RED}❌ PRE-COMMIT CHECKS FAILED${NC}"
        echo "${RED}Please fix the errors above before committing.${NC}"
    fi
    echo "${BOLD}════════════════════════════════════════════${NC}\n"
}

# Start script
print_header

# Get staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.ts\|\.tsx\|\.js\|\.jsx\|\.json\|\.md\|\.css\|\.scss\|\.html\|\.yml\|\.yaml$' || true)

if [ -z "$STAGED_FILES" ]; then
    echo "${YELLOW}No relevant files staged for commit. Skipping checks.${NC}"
    print_footer 0
    exit 0
fi

# Run formatter and linter with auto-fixing on STAGED files
print_section "Formatting and linting staged files"
echo "${CYAN}Running 'pnpm biome check --write' on staged files...${NC}"
pnpm biome check --write --no-errors-on-unmatched $STAGED_FILES
fix_exit_code=$?

if [ $fix_exit_code -ne 0 ]; then
    print_error "Biome check failed." "Please review the errors above and fix them manually."
    print_footer 1
    exit 1
fi

# Add any changes made by the formatter/linter
if [ -n "$(git diff --name-only)" ]; then
    git add .
    echo "${GREEN}✓ Formatted files have been staged.${NC}"
fi

print_success "Code is clean and formatted."

# Type checking with file listing on error
print_section "Checking types"
echo "${CYAN}Running type check...${NC}"
pnpm type-check
type_check_exit_code=$?

if [ $type_check_exit_code -eq 0 ]; then
    print_success "Types are valid"
else
    type_check_output=$(pnpm type-check 2>&1)
    echo "\n${RED}────────────────────────────────────────${NC}"
    echo "${RED}${BOLD}Type check failed with the following errors:${NC}"
    echo "${RED}────────────────────────────────────────${NC}"
    echo "$type_check_output"
    
    echo "\n${RED}Files with type errors:${NC}"
    echo "$type_check_output" | grep -E "^[^ ]+\.[t|j]sx?:[0-9]+:[0-9]+" | sort | uniq
    print_footer 1
    exit 1
fi

print_footer 0
exit 0
